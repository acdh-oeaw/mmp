# generated by appcreator
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.urls import reverse, reverse_lazy
from django.views.generic.detail import DetailView
from django.views.generic.edit import DeleteView
from . filters import *
from . forms import *
from . tables import *
from . models import (
    Autor,
    Ort
)
from browsing.browsing_utils import (
    GenericListView, BaseCreateView, BaseUpdateView, BaseDetailView
)


class AutorListView(GenericListView):

    model = Autor
    filter_class = AutorListFilter
    formhelper_class = AutorFilterFormHelper
    table_class = AutorTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = True


class AutorDetailView(BaseDetailView):

    model = Autor
    template_name = 'browsing/generic_detail.html'


class AutorCreate(BaseCreateView):

    model = Autor
    form_class = AutorForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutorCreate, self).dispatch(*args, **kwargs)


class AutorUpdate(BaseUpdateView):

    model = Autor
    form_class = AutorForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutorUpdate, self).dispatch(*args, **kwargs)


class AutorDelete(DeleteView):
    model = Autor
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:autor_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(AutorDelete, self).dispatch(*args, **kwargs)


class OrtListView(GenericListView):

    model = Ort
    filter_class = OrtListFilter
    formhelper_class = OrtFilterFormHelper
    table_class = OrtTable
    init_columns = [
        'id', 'name',
    ]
    enable_merge = True


class OrtDetailView(BaseDetailView):

    model = Ort
    template_name = 'browsing/generic_detail.html'


class OrtCreate(BaseCreateView):

    model = Ort
    form_class = OrtForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(OrtCreate, self).dispatch(*args, **kwargs)


class OrtUpdate(BaseUpdateView):

    model = Ort
    form_class = OrtForm

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(OrtUpdate, self).dispatch(*args, **kwargs)


class OrtDelete(DeleteView):
    model = Ort
    template_name = 'webpage/confirm_delete.html'
    success_url = reverse_lazy('archiv:ort_browse')

    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super(OrtDelete, self).dispatch(*args, **kwargs)


