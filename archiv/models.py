# generated by appcreator

from django.db import models
from django.urls import reverse

from vocabs.models import SkosConcept

from browsing.browsing_utils import model_to_dict


def set_extra(self, **kwargs):
    self.extra = kwargs
    return self


models.Field.set_extra = set_extra


class Autor(models.Model):
    ### Autor ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="aid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="legacy ID: <value>",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name",
        help_text="Name",
    ).set_extra(
        is_public=True,
        data_lookup="anamed",
        arche_prop="hasTitle",
    )
    name_lat = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name (lat)",
        help_text="Name (lat)",
    ).set_extra(
        is_public=True,
        data_lookup="anamelat",
        arche_prop="hasAlternativeTitle",
    )
    start_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="von",
        help_text="von",
    ).set_extra(
        is_public=True,
        data_lookup="avon",
    )
    end_date = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="bis",
        help_text="bis",
    ).set_extra(
        is_public=True,
        data_lookup="abis",
    )
    ort = models.ForeignKey(
        "Ort",
        related_name='rvn_autor_ort_ort',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        verbose_name="Ort",
        help_text="Ort",
    ).set_extra(
        is_public=True,
        data_lookup="aort",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "Autor"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:autor_browse')
    
    @classmethod
    def get_source_table(self):
        return "autor"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:autor_create')

    def get_absolute_url(self):
        return reverse('archiv:autor_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:autor_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:autor_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:autor_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:autor_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:autor_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


class Ort(models.Model):
    ### Ort ###
    legacy_id = models.CharField(
        max_length=300, blank=True,
        verbose_name="Legacy ID"
        )
    legacy_pk = models.IntegerField(
        blank=True, null=True,
        verbose_name="Primärschlüssel Alt",
        help_text="Primärschlüssel Alt",
    ).set_extra(
        is_public=False,
        data_lookup="ortid",
        arche_prop="hasNonLinkedIdentifier",
        arche_prop_str_template="legacy ID: <value>",
    )
    name = models.CharField(
        max_length=250,
        blank=True,
        verbose_name="Name (en)",
        help_text="Name (en)",
    ).set_extra(
        is_public=True,
        data_lookup="Ort_en",
        arche_prop="hasTitle",
    )
    orig_data_csv = models.TextField(
        blank=True,
        null=True,
        verbose_name="The original data"
        ).set_extra(
            is_public=True
        )

    class Meta:
        
        ordering = [
            'legacy_pk',
        ]
        verbose_name = "Ort"
    
    def __str__(self):
        if self.name:
            return "{}".format(self.name)
        else:
            return "{}".format(self.legacy_id)

    def field_dict(self):
        return model_to_dict(self)

    @classmethod
    def get_listview_url(self):
        return reverse('archiv:ort_browse')
    
    @classmethod
    def get_source_table(self):
        return "orte"
    
    
    @classmethod
    def get_natural_primary_key(self):
        return "legacy_pk"
    
    @classmethod
    def get_createview_url(self):
        return reverse('archiv:ort_create')

    def get_absolute_url(self):
        return reverse('archiv:ort_detail', kwargs={'pk': self.id})

    def get_absolute_url(self):
        return reverse('archiv:ort_detail', kwargs={'pk': self.id})

    def get_delete_url(self):
        return reverse('archiv:ort_delete', kwargs={'pk': self.id})

    def get_edit_url(self):
        return reverse('archiv:ort_edit', kwargs={'pk': self.id})

    def get_next(self):
        next = self.__class__.objects.filter(id__gt=self.id)
        if next:
            return reverse(
                'archiv:ort_detail',
                kwargs={'pk': next.first().id}
            )
        return False

    def get_prev(self):
        prev = self.__class__.objects.filter(id__lt=self.id).order_by('-id')
        if prev:
            return reverse(
                'archiv:ort_detail',
                kwargs={'pk': prev.first().id}
            )
        return False


